(** Crunch command - generates static OCaml files with pre-loaded data *)

open Cmdliner

(* Error helpers *)
let err_load_failed msg =
  Error (`Msg (Fmt.str "Failed to load site data: %s" msg))

let err_validation_failed msg =
  Error (`Msg (Fmt.str "Validation error: %s" msg))

let generate_marshaled_module ~data_dir ~output_file =
  (* Load and validate all data *)
  match Ramen.Data.load_site ~data_dir with
  | Error (`Load msg) -> err_load_failed msg
  | Error (`Validation e) ->
      let error_msg = Fmt.str "%a" Ramen.Validation.pp_error e in
      err_validation_failed error_msg
  | Ok data -> (
      (* Generate OCaml code with the data using deriving show *)
      let buffer = Buffer.create 10000 in
      let fmt = Fmt.with_buffer buffer in

      Fmt.pf fmt "(** Static data generated by ramen crunch *)@.";
      Fmt.pf fmt "(** Generated on: %s *)@.@."
        (Ptime.to_rfc3339 (Ptime_clock.now ()));

      (* Generate the data value using the show function *)
      Fmt.pf fmt "let data : Ramen.Core.t =@.";
      Fmt.pf fmt "  %s@." (Ramen.Data.show data);

      ();

      (* Write to file *)
      try
        let oc = open_out output_file in
        output_string oc (Buffer.contents buffer);
        close_out oc;
        Common.Log.file_op ~action:"Generated" ~path:output_file;
        Ok ()
      with Sys_error msg -> Error (`Msg msg))

let data_dir =
  let doc = "Path to the data directory" in
  Arg.(value & opt string "data" & info [ "data-dir"; "d" ] ~docv:"PATH" ~doc)

let output_file =
  let doc = "Output OCaml file" in
  Arg.(
    value
    & opt string "data_static.ml"
    & info [ "output"; "o" ] ~docv:"FILE" ~doc)

let run data_dir output_file =
  match generate_marshaled_module ~data_dir ~output_file with
  | Ok () -> ()
  | Error (`Msg msg) ->
      Common.Log.error "%s" msg;
      exit 1

let cmd =
  let doc = "Generate static OCaml module with pre-loaded data" in
  let info =
    Cmd.info "crunch" ~doc
      ~man:
        [
          `S "DESCRIPTION";
          `P
            "The $(b,crunch) command generates a static OCaml module \
             containing all site data.";
          `P
            "This allows you to compile the data directly into your binary, \
             avoiding runtime I/O.";
          `S "USAGE";
          `P
            "$(b,ramen crunch) will generate a file $(b,data_static.ml) with \
             the following signature:";
          `Pre "  val data : Ramen.Core.t";
          `P
            "You can then use this in your build pipeline to create a fully \
             static site generator.";
        ]
  in
  let term = Term.(const run $ data_dir $ output_file) in
  Cmd.v info term
